/// happyPath1 -- testing the bare minimum for moving rev between shards
//
// We aim to run cross-shard.rho through its paces as specified in
// https://rchain.atlassian.net/wiki/spaces/CORE/pages/478445641/Shards+in+RChain
// https://rchain.atlassian.net/wiki/spaces/CORE/pages/488243367/Cross-shard+transfers
//
// child to parent (or vice versa)


// mintfactory with owners
//
//---

//somebody created Depository in parent (for example)

//-> I want to move money to Steve (child)
//"sendToChild"
//Mint has owners, watching for sendToChild

//mintfactory is used at shard creation
//in child Mint (Steve)


import CrossShard, MockRegistry, TestCase in {
  new stdout(`rho:io:stdout`), stderr(`rho:io:stderr`), mockREVCh, partsCh, depCh in {
    stderr!("Cross Shard testing.") |

    @`rho:registry`!!(*MockRegistry) | @"MakeMint"!(*mockREVCh) |

    CrossShard!(*partsCh) | for(@[BallotFactory, _, _, DepositoryFactory, MintFactory] <- partsCh) {
      stderr!(["got parts"]) |

      // Create a depository in the parent shard.
      new depPurseCh, sendPurseCh, statusCh in {
        // the purse backing the Rev issued in the child shard.
        // Validators of the child shard have to stake Rev minted in the child-shard.
        for (@mockREV <- mockREVCh) {
          stderr!(["making purses"]) |
          @[mockREV, "makePurse"]!(500, *depPurseCh) |
          @[mockREV, "makePurse"]!(50, *sendPurseCh)
        }
        |

        for (@depPurse <- depPurseCh; @sendPurse <- sendPurseCh) {
          stderr!(["made purse"]) |

          new checkBalCh in {
            @[depPurse, "getBalance"]!(*checkBalCh) | for (@bal <- checkBalCh) {
              stderr!(["send purse bal:", bal])
            }
          }
          |
          @[DepositoryFactory, "create"]!(
            Set("3122c39dbd785d3bada0b8445c07d401af931646d4a5d486bc6e2c8088241079".hexToBytes(),
              "90685cf270025cddab375b3de595e9b87548c5f05f9e5bf17502d7cfcb7259f7".hexToBytes(),
              "155d6fbdc9d0520575012f9a03a90c41f0736be9a4fcfe4d5e5b5574faee365a".hexToBytes()),
            // sendQuorumSize, calcelQuorumSize
            2, 1,
            depPurse,
            // depositFee
            1,
            *depCh) | for (@dep1 <- depCh) {
            stderr!(["@@depository:", dep1]) |

            new ballotCh in {
              @[*MockRegistry, "getLast"]!(*ballotCh) | for (@ballot <- ballotCh) {
                stderr!(["ballot?", ballot]) |

                @[dep1, "sendToChild"]!(sendPurse,
                  "d44306bc8e56d0f9885d2f75fec5ce72d1967faa1370a4c02e642b31c5ffdce5".hexToBytes(), *statusCh) |
                for (@status <- statusCh) {
                  stderr!(["sendToChild status:", status])
                }
              }
            }
          }
        }
      }
    }
  }
}
